//https://cses.fi/problemset/task/1192/
#include<iostream>
#include<iomanip>
#include<climits>
#include<cmath>
#include<vector>
#include<map>
#include<queue>
#include<algorithm>
#include<cstring>
using namespace std;
using ll=long long;
char grid[1000][1000];
bool visited[1000][1000];
int n,m;
bool valid(int x, int y)
{
    return (x>=0 && y>=0 && x<n && y<m);
}
int X[]={0,0,1,-1};
int Y[]={1,-1,0,0};
void dfs(int x, int y)
{
    visited[x][y]=true;
    for (int k=0;k<4;k++){
        int new_x=x+X[k];
        int new_y=y+Y[k];
        if (valid(new_x,new_y)){
            if (!visited[new_x][new_y] && grid[new_x][new_y]!='#') dfs(new_x,new_y);
        }
    }
}
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    cin>>n>>m;
    for (int i=0;i<n;i++){
        for (int j=0;j<m;j++) {
            cin>>grid[i][j];
            visited[i][j]=false;
        }
    }
    int ans=0;
    for (int i=0;i<n;i++){
        for (int j=0;j<m;j++){
            if (!visited[i][j] && grid[i][j]!='#'){
                ans++;
                dfs(i,j);
            }
        }
    }
    cout<<ans<<endl;
}
