//https://cses.fi/problemset/task/1669/
#include<iostream>
#include<vector>
using namespace std;
using ll=long long;
vector<int> edges[100001];
vector<bool> visited(100001);
vector<int> path;
bool ans=false;
void dfs(int x, int parent)
{
	visited[x]=true;
	path.push_back(x);
	for (int i:edges[x]){
		if (i!=parent && !ans){
			if (!visited[i]) dfs(i,x);
			else{
				ans=true;
				vector<int> print={i};
				while(path.back()!=i) {
					print.push_back(path.back());
					path.pop_back();
				}
				cout<<print.size()+1<<endl;
				for (int j:print) cout<<j<<' ';
				cout<<i<<endl;
				break;
			}
		}
	}
	path.pop_back();
}
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
	int n,m;
	cin>>n>>m;
	for (int i=0;i<m;i++) {
		int a,b;
		cin>>a>>b;
		edges[a].push_back(b);
		edges[b].push_back(a);
	}
	for (int i=1;i<=n;i++){
		if (!visited[i] && !ans) dfs(i,0);
	}
	if (!ans) cout<<"IMPOSSIBLE\n";
}
