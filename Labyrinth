#include<iostream>
#include<iomanip>
#include<climits>
#include<cmath>
#include<vector>
#include<map>
#include<queue>
#include<algorithm>
#include<cstring>
#include<stack>
using namespace std;
using ll=long long;
char grid[1000][1000];
bool visited[1000][1000];
pair<int,int> pred[1000][1000];
int n,m;
bool valid(int x, int y)
{
    return (x>=0 && y>=0 && x<n && y<m);
}
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    cin>>n>>m;
    int Ax,Ay,Bx,By;
    for (int i=0;i<n;i++){
        for (int j=0;j<m;j++) {
            cin>>grid[i][j];
            visited[i][j]=false;
            pred[i][j]={-1,-1};
            if (grid[i][j]=='A') {
                Ax=i;
                Ay=j;
            }
            else if (grid[i][j]=='B') {
                Bx=i;
                By=j;
            }
        }
    }
    queue<pair<int,int>> q;
    q.push({Ax,Ay});
    visited[Ax][Ay]=true;
    int X[]={0,0,1,-1};
    int Y[]={1,-1,0,0};
    bool f=true;
    while(!q.empty()){
        pair<int,int> p=q.front();
        q.pop();
        int x=p.first,y=p.second;

        for (int k=0;k<4;k++){
            int new_x=x+X[k];
            int new_y=y+Y[k];
            if (valid(new_x,new_y)){
                if (!visited[new_x][new_y] && grid[new_x][new_y]!='#') {
                    if (new_x==Bx && new_y==By) f=false;
                    visited[new_x][new_y]=true;
                    q.push({new_x,new_y});
                    pred[new_x][new_y]={x,y};
                }
            }
        }
    }
    if (f) {
        cout<<"NO\n";
        return 0;
    }
    stack<char> s;
    while(Bx!=-1){
        pair<int,int> p=pred[Bx][By];
        int x=p.first,y=p.second;
        if (x==Bx){
            if (y>By) s.push('L');
            else s.push('R');
        }
        else{
            if (x>Bx) s.push('U');
            else s.push('D');
        }
        Bx=x,By=y;
    }

    s.pop();
    cout<<"YES\n"<<s.size()<<endl;
    while(!s.empty()){
        cout<<s.top();
        s.pop();
    }
    cout<<endl;
}
